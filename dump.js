// Generated by LiveScript 1.3.1
var fs, path, split, parseLine, tarball, redis, config, ref$, REDIS_IP, REDIS_PORT, dump;
fs = require('fs');
path = require('path');
split = require('split');
parseLine = require('kage.json/lib/utils').parseLine;
tarball = require('tarball-extract');
redis = require('redis');
config = {
  rootPath: path.resolve(__dirname)
};
ref$ = process.env, REDIS_IP = ref$.REDIS_IP, REDIS_PORT = ref$.REDIS_PORT;
dump = function(done){
  var client, glyphCount, count, jsonPath, url;
  client = redis.createClient(+REDIS_PORT, REDIS_IP);
  client.on('error', function(it){
    return console.log(it);
  });
  glyphCount = 0;
  count = 0;
  jsonPath = path.resolve(config.rootPath, 'json');
  if (!fs.existsSync(jsonPath)) {
    fs.mkdirSync(jsonPath);
  }
  url = 'http://glyphwiki.org/dump.tar.gz';
  return tarball.extractTarballDownload(url, 'dump.tar.gz', path.resolve(config.rootPath, 'data') + "", {}, function(err, result){
    return fs.createReadStream(path.resolve(config.rootPath, 'data', 'dump_newest_only.txt')).pipe(split()).on('data', function(line){
      var total, glyph, id, raw;
      if (/.*name.*related.*data/.exec(line)) {
        return;
      }
      if (/^[-+]+$/.exec(line)) {
        count = 0;
        return;
      }
      if (/\((\d+) è¡Œ\)/.exec(line)) {
        total = +RegExp.$1;
        if (total !== count) {
          throw new Error("glyph number mismatched: " + count + "/" + total);
        }
        client.quit();
        return done(count);
      }
      glyph = parseLine(line), id = glyph.id, raw = glyph.raw;
      delete glyph.raw;
      if (!id) {
        return;
      }
      client.set(id + "", raw);
      client.set(id + ".json", JSON.stringify(glyph));
      return ++count;
    });
  });
};
module.exports = dump;