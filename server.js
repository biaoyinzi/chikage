// Generated by LiveScript 1.4.0
var express, redis, cors, dump, fold, ref$, REDIS_IP, REDIS_PORT, PORT, ref1$, client, fetchTree, app;
express = require('express');
redis = require('redis');
cors = require('cors');
dump = require('./dump');
fold = require('prelude-ls').fold;
ref$ = process.env, REDIS_IP = ref$.REDIS_IP, REDIS_PORT = ref$.REDIS_PORT, PORT = (ref1$ = ref$.PORT) != null ? ref1$ : 8080;
console.log("connect to " + REDIS_IP + ":" + REDIS_PORT);
client = redis.createClient(+REDIS_PORT, REDIS_IP);
client.on('error', function(it){
  return console.log(it);
});
fetchTree = function(client, id, done){
  client.get(id + ".json", function(err, reply){
    var toFetch, count, buhin, i$, len$, op;
    if (err) {
      return done(err);
    }
    toFetch = [];
    count = 0;
    buhin = JSON.parse(reply);
    toFetch = fold(function(acc, op){
      if (op.type === 'link') {
        return acc.concat([op]);
      } else {
        return acc;
      }
    }, [])(
    buhin.data);
    for (i$ = 0, len$ = toFetch.length; i$ < len$; ++i$) {
      op = toFetch[i$];
      fetchTree(client, op.src, fn$);
    }
    if (toFetch.length === 0) {
      return done(void 8, buhin);
    }
    function fn$(err, body){
      if (err) {
        return done(err);
      }
      import$(op, body);
      ++count;
      if (count === toFetch.length) {
        return done(void 8, buhin);
      }
    }
  });
};
app = express();
app.use(cors()).get('/:id', function(req, res){
  var id;
  if (req.params.id) {
    id = req.params.id;
    if (id.match(/(.*)\.json$/)) {
      return fetchTree(client, RegExp.$1, function(err, reply){
        if (err) {
          res.sendStatus(500);
        }
        return res.json(reply);
      });
    } else {
      return client.get(id, function(err, reply){
        if (err) {
          res.sendStatus(404);
        }
        return res.send(reply);
      });
    }
  } else {
    return res.json('KAGE API');
  }
}).put('/dump', function(req, res){
  return dump(function(entryCount){
    return res.json({
      entryUpdated: entryCount
    });
  });
});
app.listen(PORT, function(){
  return console.log("server listen on " + PORT);
});
function import$(obj, src){
  var own = {}.hasOwnProperty;
  for (var key in src) if (own.call(src, key)) obj[key] = src[key];
  return obj;
}